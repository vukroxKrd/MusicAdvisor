type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/InputSemaphore.java
  visible: true
  text: |
    package advisor;

    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import server.HTTPServer;

    import java.awt.*;
    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.util.*;
    import java.util.List;

    import static java.net.http.HttpRequest.newBuilder;

    public class InputSemaphore {
        public static final List<String> supportedOps = List.of("new", "featured", "categories", "playlists Mood", "auth", "exit");
        public static boolean continueReceivingInput = true;
        public static Map<String, String> parameters = new HashMap<>();

        private static Map<String, String> categories;

        public InputSemaphore() {
        }

        public static Map<String, String> getCategories() {
            if (categories == null) {
                categories = new HashMap<>();
            }
            return categories;
        }

        public void selectOperation(String input, SpotifyUser user) {

            String playlistCategory = "";
            if (input.contains("playlists")) {
                playlistCategory = input.replaceAll("playlists ", "");
                input = "playlists";
            }

            if (input.equals("exit")) {
                sayGoodBye();
            } else if (!user.isAuthenticated() && !input.equals("auth")) {
                promptUserToAuthenticate();
            } else {
                switch (input) {
                    case "new" -> newReleases(user, parameters);
                    case "featured" -> featured(user, parameters);
                    case "categories" -> categories(user, parameters);
                    case "playlists" -> playlists(user, parameters, playlistCategory);
                    case "auth" -> authenticate(user);
                    default -> returnSupportedOpList(supportedOps);
                }
            }
        }

        private void promptUserToAuthenticate() {
            System.out.println("Please, provide access for application.");
        }

        private void authenticate(SpotifyUser user) {

            HTTPServer.listen(user);

            initialGetForCodeFromSpotify(user);

    //        SpotifyUser user1 = HTTPServer.reqeustTokensFromRemoteResource(user);

        }

        private static void initialGetForCodeFromSpotify(SpotifyUser user) {
            String port = Main.port;

            String storedState = HTTPServer.generateRandomState(10);
            user.setStoredState(storedState);

            HttpClient client = HttpClient.newBuilder()
                    .build();

            String responseType = "code";
    //        String redirectUri = "http://localhost:8181";
                    String redirectUri = String.format("http://localhost:%s", port);

            String url = String.format("%s/authorize?client_id=%s&response_type=%s&redirect_uri=%s&state=%s", Main.domainName, user.getClientId(), responseType, redirectUri, storedState);

            HttpRequest request = newBuilder()
                    .uri(URI.create(url))
                    .GET()
                    .build();

            try {
                client.send(request, HttpResponse.BodyHandlers.ofString());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }

            if (Desktop.isDesktopSupported()) {
                System.out.println("Inside desktop");
                try {
                    Desktop.getDesktop().browse(URI.create(url));
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }

        private static HttpResponse<String> sendGetRequestToSpotifyApi(SpotifyUser user, String endpointName, Map<String, String> parameters) {

            HttpRequest.Builder builder = newBuilder();

            HttpClient client = HttpClient.newBuilder().build();
            String endpoint = Main.spotifyApiV1 + endpointName;


    //        if (!parameters.isEmpty()) {
    //            String processedParams = HTTPServer.getFormDataAsString(parameters);
    //            pathToCall = String.format(endpoint + "?" + processedParams);
    //        } else {
    //            pathToCall = endpoint;
    //        }

            HttpRequest request = builder.header("Authorization", "Bearer " + user.getAccessToken())
                    .uri(URI.create(endpoint))
                    .GET()
                    .build();

            HttpResponse<String> response;
            try {
                response = client.send(request, HttpResponse.BodyHandlers.ofString());
    //            System.out.println(response.body());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
            return response;
        }

        private void newReleases(SpotifyUser user, Map<String, String> parameters) {
            String endpoint = "/v1/browse/new-releases";
    //        parameters.put("country", "US");
    //        parameters.put("limit", "5");

            HttpResponse<String> response = sendGetRequestToSpotifyApi(user, endpoint, parameters);

            if (response.statusCode() == 200) {
                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
                JsonObject albums = body.getAsJsonObject("albums");
                JsonArray items = albums.getAsJsonArray("items");

                for (JsonElement item : items) {
                    JsonObject itm = item.getAsJsonObject();
                    String albumName = itm.get("name").getAsString();
                    System.out.println(albumName);

                    List<String> allArtists = new ArrayList<>();
                    JsonArray artists = itm.get("artists").getAsJsonArray();
                    for (JsonElement oneArtist : artists) {
                        JsonObject artist = oneArtist.getAsJsonObject();
                        allArtists.add(artist.get("name").getAsString());
                    }
                    System.out.println(allArtists);

                    JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
                    String spotifyUrl = externalUrls.get("spotify").getAsString();
                    System.out.println(spotifyUrl);
                    System.out.println();
                }
            } else {
                if (response.body() != null && !response.body().isEmpty()) {
                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
                    JsonObject error = errorBody.getAsJsonObject("error");
                    System.out.println(error.get("message").getAsString());
                }
            }

    //        if (response.headers().firstValue(":status").isPresent()) {
    //            String status = response.headers().firstValue(":status").get();
    //            if (status.equals("200")) {
    //                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
    //                JsonObject albums = body.getAsJsonObject("albums");
    //                JsonArray items = albums.getAsJsonArray("items");
    //
    //                for (JsonElement item : items) {
    //                    JsonObject itm = item.getAsJsonObject();
    //                    String albumName = itm.get("name").getAsString();
    //                    System.out.println(albumName);
    //
    //                    List<String> allArtists = new ArrayList<>();
    //                    JsonArray artists = itm.get("artists").getAsJsonArray();
    //                    for (JsonElement oneArtist : artists) {
    //                        JsonObject artist = oneArtist.getAsJsonObject();
    //                        allArtists.add(artist.get("name").getAsString());
    //                    }
    //                    System.out.println(allArtists);
    //
    //                    JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
    //                    String spotifyUrl = externalUrls.get("spotify").getAsString();
    //                    System.out.println(spotifyUrl);
    //                    System.out.println();
    //                }
    //            } else {
    //                if (response.body() != null && !response.body().isEmpty()) {
    //                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
    //                    JsonObject error = errorBody.getAsJsonObject("error");
    //                    System.out.println(error.get("message").getAsString());
    //                }
    //            }
    //        } else {
    //            System.out.println("Request was not successful");
    //            System.out.println(response.body());
    //        }
        }

        private void featured(SpotifyUser user, Map<String, String> parameters) {

            String endpoint = "/v1/browse/featured-playlists";
    //        parameters.put("country", "US");
    //        parameters.put("limit", "5");

            HttpResponse<String> response = sendGetRequestToSpotifyApi(user, endpoint, parameters);

            if (response.statusCode() == 200) {
                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
                JsonObject playlists = body.getAsJsonObject("playlists");
                JsonArray itemsJson = playlists.getAsJsonArray("items");

                for (JsonElement item : itemsJson.getAsJsonArray()) {
                    JsonObject itm = item.getAsJsonObject();
                    System.out.println(itm.get("name").getAsString());

                    JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
                    String spotifyUrl = externalUrls.get("spotify").getAsString();
                    System.out.println(spotifyUrl);
                    System.out.println();
                }
            } else {
                if (response.body() != null && !response.body().isEmpty()) {
                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
                    JsonObject error = errorBody.getAsJsonObject("error");
                    System.out.println(error.get("message").getAsString());
                }
            }

    //        if (response.headers().firstValue(":status").isPresent()) {
    //            String status = response.headers().firstValue(":status").get();
    //            if (status.equals("200")) {
    //                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
    //                JsonObject playlists = body.getAsJsonObject("playlists");
    //                JsonArray itemsJson = playlists.getAsJsonArray("items");
    //
    //                for (JsonElement item : itemsJson.getAsJsonArray()) {
    //                    JsonObject itm = item.getAsJsonObject();
    //                    System.out.println(itm.get("name").getAsString());
    //
    //                    JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
    //                    String spotifyUrl = externalUrls.get("spotify").getAsString();
    //                    System.out.println(spotifyUrl);
    //                    System.out.println();
    //                }
    //            } else {
    //                if (response.body() != null && !response.body().isEmpty()) {
    //                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
    //                    JsonObject error = errorBody.getAsJsonObject("error");
    //                    System.out.println(error.get("message").getAsString());
    //                }
    //            }
    //        } else {
    //            System.out.println("Request was not successful");
    //            System.out.println(response.body());
    //        }
        }

        private void categories(SpotifyUser user, Map<String, String> parameters) {
            String endpoint = "/v1/browse/categories";
    //        parameters.put("country", "US");
    //        parameters.put("limit", "5");

            HttpResponse<String> response = sendGetRequestToSpotifyApi(user, endpoint, parameters);

            if (response.statusCode() == 200) {
                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
                JsonObject categories = body.getAsJsonObject("categories");
                JsonArray itemsJson = categories.getAsJsonArray("items");

                for (JsonElement item : itemsJson.getAsJsonArray()) {
                    JsonObject itm = item.getAsJsonObject();
                    String categoryName = itm.get("name").getAsString();
                    String catId = itm.get("id").getAsString();
                    getCategories().put(categoryName, catId);

                    System.out.println(itm.get("name").getAsString());
                }
                getCategories().forEach((k, v) -> System.out.println(k + " : " + v));
            } else {
                if (response.body() != null && !response.body().isEmpty()) {
                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
                    JsonObject error = errorBody.getAsJsonObject("error");
                    System.out.println(error.get("message").getAsString());
                }
            }

    //        if (response.headers().firstValue(":status").isPresent()) {
    //            String status = response.headers().firstValue(":status").get();
    //            if (status.equals("200")) {
    //                JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
    //                JsonObject categories = body.getAsJsonObject("categories");
    //                JsonArray itemsJson = categories.getAsJsonArray("items");
    //
    //                for (JsonElement item : itemsJson.getAsJsonArray()) {
    //                    JsonObject itm = item.getAsJsonObject();
    //                    String categoryName = itm.get("name").getAsString();
    //                    String catId = itm.get("id").getAsString();
    //                    getCategories().put(categoryName, catId);
    //
    //                    System.out.println(itm.get("name").getAsString());
    //                }
    //            } else {
    //                if (response.body() != null && !response.body().isEmpty()) {
    //                    JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
    //                    JsonObject error = errorBody.getAsJsonObject("error");
    //                    System.out.println(error.get("message").getAsString());
    //                }
    //            }
    //        } else {
    //            System.out.println("Request was not successful");
    //            System.out.println(response.body());
    //        }
        }

        private void playlists(SpotifyUser user, Map<String, String> parameters, String playlistCategory) {
            String catId = getCategories().get(playlistCategory);
            if (catId == null) {
                System.out.println("Unknown category name.");
            } else {
                String endpoint = String.format("/v1/browse/categories/%s/playlists", catId);
    //            parameters.put("country", "US");
    //            parameters.put("limit", "5");

                HttpResponse<String> response = sendGetRequestToSpotifyApi(user, endpoint, parameters);

                if (response.statusCode() == 200) {
                    JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
                    JsonObject categories = body.getAsJsonObject("playlists");
                    JsonArray itemsJson = categories.getAsJsonArray("items");

                    for (JsonElement item : itemsJson.getAsJsonArray()) {
                        JsonObject itm = item.getAsJsonObject();
                        System.out.println(itm.get("name").getAsString());

                        JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
                        String spotifyUrl = externalUrls.get("spotify").getAsString();
                        System.out.println(spotifyUrl);
                        System.out.println();
                    }
                } else {
                    if (response.body() != null && !response.body().isEmpty()) {
                        JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
                        JsonObject error = errorBody.getAsJsonObject("error");
                        System.out.println(error.get("message").getAsString());
                    }

    //            if (response.headers().firstValue(":status").isPresent()) {
    //                String status = response.headers().firstValue(":status").get();
    //                if (status.equals("200")) {
    //                    JsonObject body = JsonParser.parseString(response.body()).getAsJsonObject();
    //                    JsonObject categories = body.getAsJsonObject("playlists");
    //                    JsonArray itemsJson = categories.getAsJsonArray("items");
    //
    //                    for (JsonElement item : itemsJson.getAsJsonArray()) {
    //                        JsonObject itm = item.getAsJsonObject();
    //                        System.out.println(itm.get("name").getAsString());
    //
    //                        JsonObject externalUrls = itm.get("external_urls").getAsJsonObject();
    //                        String spotifyUrl = externalUrls.get("spotify").getAsString();
    //                        System.out.println(spotifyUrl);
    //                        System.out.println();
    //                    }
    //                } else {
    //                    if (response.body() != null && !response.body().isEmpty()) {
    //                        JsonObject errorBody = JsonParser.parseString(response.body()).getAsJsonObject();
    //                        JsonObject error = errorBody.getAsJsonObject("error");
    //                        System.out.println(error.get("message").getAsString());
    //                    }
    //                }
    //            } else {
    //                System.out.println("Request was not successful");
    //                System.out.println(response.body());
                }
            }
        }

        private void sayGoodBye() {
            System.out.println("---GOODBYE!---");
            continueReceivingInput = false;
    //        HTTPServer.stop(0);
        }

        private void returnSupportedOpList(List<String> operations) {
    //        continueReceivingInput = false;
            System.out.println("The list of supported operations: ");
            operations.forEach(System.out::println);
        }
    }
  learner_created: false
- name: src/server/SpotifyAuthResponse.java
  visible: true
  text: |
    package server;

    public class SpotifyAuthResponse {
         private String access_token;
         private String token_type;
         private String expires_in;
         private String refresh_token;
         private String scope;

        public String getAccess_token() {
            return access_token;
        }
        public void setAccess_token(String access_token) {
            this.access_token = access_token;
        }

        public String getToken_type() {
            return token_type;
        }
        public void setToken_type(String token_type) {
            this.token_type = token_type;
        }

        public String getExpires_in() {
            return expires_in;
        }
        public void setExpires_in(String expires_in) {
            this.expires_in = expires_in;
        }

        public String getRefresh_token() {
            return refresh_token;
        }
        public void setRefresh_token(String refresh_token) {
            this.refresh_token = refresh_token;
        }

        public String getScope() {
            return scope;
        }
        public void setScope(String scope) {
            this.scope = scope;
        }
    }
  learner_created: false
- name: src/advisor/SpotifyUser.java
  visible: true
  text: |
    package advisor;

    public class SpotifyUser {

        private String clientId;
        private String clientSecret;
        private boolean isAuthenticated = false;
        private String code;
        private String storedState;
        private String accessToken;
        private String refreshToken;
        private String tokenType;
        public SpotifyUser() {
        }
        public SpotifyUser(String clientId, String clientSecret, boolean isAuthenticated) {
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.isAuthenticated = false;
        }

        public boolean isAuthenticated() {
            return isAuthenticated;
        }
        public void setAuthenticated(boolean authenticated) {
            isAuthenticated = authenticated;
        }

        public String getClientId() {
            return clientId;
        }
        public void setClientId(String clientId) {
            this.clientId = clientId;
        }

        public String getClientSecret() {
            return clientSecret;
        }
        public void setClientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
        }

        public String getCode() {
            return code;
        }
        public void setCode(String code) {
            this.code = code;
        }

        public String getStoredState() {
            return storedState;
        }
        public void setStoredState(String storedState) {
            this.storedState = storedState;
        }

        public String getAccessToken() {
            return accessToken;
        }
        public void setAccessToken(String accessToken) {
            this.accessToken = accessToken;
        }

        public String getRefreshToken() {
            return refreshToken;
        }
        public void setRefreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
        }

        public String getTokenType() {
            return tokenType;
        }
        public void setTokenType(String tokenType) {
            this.tokenType = tokenType;
        }

        @Override
        public String toString() {
            return "SpotifyUser{" +
                    "clientId='" + clientId + '\'' +
                    ", clientSecret='" + clientSecret + '\'' +
                    ", isAuthenticated=" + isAuthenticated +
                    ", code='" + code + '\'' +
                    ", storedState='" + storedState + '\'' +
                    ", accessToken='" + accessToken + '\'' +
                    ", refreshToken='" + refreshToken + '\'' +
                    ", tokenType='" + tokenType + '\'' +
                    '}';
        }
    }
  learner_created: false
- name: src/resources/spotify.properties
  visible: true
  text: |-
    client_id=616b49ea385644bbaa28ea3337e027c7
    client_secret=784f6d729fb049eda00c01da538c6e3d
  learner_created: false
- name: src/server/HTTPServer.java
  visible: true
  text: |-
    package server;

    import advisor.Main;
    import advisor.SpotifyUser;
    import com.google.gson.Gson;
    import com.sun.net.httpserver.HttpExchange;
    import com.sun.net.httpserver.HttpHandler;
    import com.sun.net.httpserver.HttpServer;

    import java.io.IOException;
    import java.io.UnsupportedEncodingException;
    import java.net.InetSocketAddress;
    import java.net.URI;
    import java.net.URLDecoder;
    import java.net.URLEncoder;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.nio.charset.StandardCharsets;
    import java.util.Base64;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;

    import static advisor.Main.domainName;
    import static com.sun.net.httpserver.HttpServer.create;

    public class HTTPServer {
        private static HttpServer server;
        public static String code;

        public static void listen(SpotifyUser user) {

            try {
                server.createContext("/",
                        new HttpHandler() {
                            public void handle(HttpExchange exchange) throws IOException {
                                String query = exchange.getRequestURI().getQuery();
                                String msg;

                                if (query != null && query.contains("code")) {
                                    Map<String, String> qParams = parseQueryToParams(query);
                                    code = qParams.get("code");
                                    msg = "Got the code. Return back to your program.";
                                    user.setCode(code);
                                    System.out.println(code);
                                    System.out.println("code received");
                                    exchange.sendResponseHeaders(200, msg.length());
                                    exchange.getResponseBody().write(msg.getBytes());
                                    exchange.getResponseBody().close();
                                } else {
                                    msg = "Authorization code not found. Try again.";
                                    exchange.sendResponseHeaders(404, msg.length());
                                    exchange.getResponseBody().write(msg.getBytes());
                                    exchange.getResponseBody().close();
                                }
                            }
                        });

                System.out.println("waiting for code...");

                while (code == null) {
                    Thread.sleep(5);
                }
                HTTPServer.stop(0);

                HTTPServer.reqeustTokensFromRemoteResource(user);

            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        public static SpotifyUser reqeustTokensFromRemoteResource(SpotifyUser user) {

            HttpClient client = HttpClient.newBuilder().build();

            String idAndSecretToEncode = user.getClientId() + ":" + user.getClientSecret();

            String encodedCreds = Base64.getEncoder().encodeToString(idAndSecretToEncode.getBytes());
            encodedCreds = "Basic " + encodedCreds;
            Map<String, String> formData = new HashMap<>();
    //        formData.put("code", user.getCode());
            formData.put("client_id", user.getClientId());
            formData.put("client_secret", user.getClientSecret());
            formData.put("grant_type", "authorization_code");
            formData.put("code", code);
    //        formData.put("redirect_uri", "http%3A%2F%2Flocalhost%3A8181");
            formData.put("redirect_uri", "http://localhost:"+Main.port);

            HttpRequest postRequest = HttpRequest.newBuilder()
                    .header("Authorization", encodedCreds)
                    .header("Content-Type", "application/x-www-form-urlencoded")
    //                .uri(URI.create(user.getEndpointUrl() + "/api/token"))
                    .uri(URI.create(domainName + "/api/token"))
                    .POST(HttpRequest.BodyPublishers.ofString(getFormDataAsString(formData)))
                    .build();

            System.out.println("PostRequest");
            System.out.println(postRequest);

            HttpResponse<String> postResponse = null;
            String postBody = null;
            try {
                System.out.println("Making http request for access_token...");
                postResponse = client.send(postRequest, HttpResponse.BodyHandlers.ofString());
                postBody = postResponse.body();
                System.out.println("response:");
                System.out.println(postBody);
                user.setAuthenticated(true);
                System.out.println("Success!");
            } catch (InterruptedException | IOException e) {
                System.out.println("Got into catch block in POST");
                throw new RuntimeException(e);
            }

            Gson gson = new Gson();
            SpotifyAuthResponse spotifyAuthResponse = gson.fromJson(postBody, SpotifyAuthResponse.class);
    //        System.out.println(spotifyAuthResponse);

            if (spotifyAuthResponse.getAccess_token() != null) {
                user.setAccessToken(spotifyAuthResponse.getAccess_token());
                user.setRefreshToken(spotifyAuthResponse.getRefresh_token());
    //            System.out.println(user);
            }
            return user;
        }

        public static String getFormDataAsString(Map<String, String> formData) {
            StringBuilder formBodyBuilder = new StringBuilder();
            for (Map.Entry<String, String> singleEntry : formData.entrySet()) {
                if (formBodyBuilder.length() > 0) {
                    formBodyBuilder.append("&");
                }
                formBodyBuilder.append(URLEncoder.encode(singleEntry.getKey(), StandardCharsets.UTF_8));
                formBodyBuilder.append("=");
                formBodyBuilder.append(URLEncoder.encode(singleEntry.getValue(), StandardCharsets.UTF_8));
            }
            return formBodyBuilder.toString();
        }

        private static Map<String, String> parseQueryToParams(String query) {
            /* Взято с https://stackoverflow.com/questions/11640025/how-to-obtain-the-query-string-in-a-get-with-java-httpserver-httpexchange
             * С небольшими изменениями
             */
            Map<String, String> result = new HashMap<>();
            if (query == null) {
                return result;
            }

            int last = 0;
            int next;
            int length = query.length();

            while (last < length) {
                next = query.indexOf('&', last);
                if (next == -1) {
                    next = length;
                }

                if (next > last) {
                    int eqPos = query.indexOf('=', last);
                    try {
                        if (eqPos < 0 || eqPos > next) {
                            result.put(URLDecoder.decode(query.substring(last, next), "utf-8"), "");
                        } else {
                            result.put(URLDecoder.decode(query.substring(last, eqPos), "utf-8"), URLDecoder.decode(query.substring(eqPos + 1, next), "utf-8"));
                        }
                    } catch (UnsupportedEncodingException e) {
                        assert false : "UTF-8 поддерживается Java 'Из коробки' - исключения быть не должно";
                    }
                }
                last = next + 1;
            }
            return result;
        }

        public static void start() throws IOException {
            int portNumber = Main.generateRandomPortNumber(8000, 9000);
            Main.port = String.valueOf(portNumber);
            server = create();
    //        server.bind(new InetSocketAddress(8181), 0);
            server.bind(new InetSocketAddress(Integer.parseInt(Main.port)), 0);
            server.setExecutor(null);
            server.start();
            System.out.println("use this link to request the access code: ");
            System.out.println(domainName + "/authorize?client_id=0db1be20b0494973a17516bae8af091d&redirect_uri=http://localhost:" + Main.port + "&response_type=code");
            System.out.println("waiting for code...");
        }

        public static void stop(int delay) {
            server.stop(delay);
        }

        public static String generateRandomState(int length) {
            char[] text = new char[length];
            String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            Random random = new Random();
            for (var i = 0; i < length; i++) {
                text[i] = characters.charAt(random.nextInt(characters.length()));
            }
            return new String(text);
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    import server.HTTPServer;

    import java.io.IOException;
    import java.util.Random;
    import java.util.Scanner;

    import static advisor.InputSemaphore.continueReceivingInput;

    public class Main {
        static Scanner scanner = new Scanner(System.in);
        public static String domainName = "https://accounts.spotify.com";
        public static String spotifyApiV1 = "https://api.spotify.com";
        public static String requestOperation() {
            return scanner.nextLine();
        }
        public static String port;
        public static void main(String[] args) {

            if (args.length > 0 && args[0].equals("-access")) {
                domainName = args[1];
                spotifyApiV1 = args[3];
            }
            try {
                HTTPServer.start();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            SpotifyUser user = new SpotifyUser("616b49ea385644bbaa28ea3337e027c7", "784f6d729fb049eda00c01da538c6e3d", false);
            InputSemaphore semaphore = new InputSemaphore();

            do {
                semaphore.selectOperation(requestOperation(), user);
            } while (continueReceivingInput);

        }

        public static int generateRandomPortNumber(int min, int max) {
            Random random = new Random();
            return random.nextInt(max - min) + min;
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";


        private static final int accessServerPort = 45678;
        private static final int resourceServerPort = 56789;

        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
        private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl,
                "-resource",
                resourceServerUrl,
                "-page",
                "1"
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        // TODO handle auth code argument to get the token.
        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);


        private static final String spotifyServerUrl = "https://api\\.spotify\\.com";

        private static final String apiCategoriesResponse = """
            {
                "categories": {
                    "href": "https://api.spotify.com/v1/browse/categories?offset=0&limit=20",
                    "items": [
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/toplists",
                            "icons": [
                                {
                                    "height": 275,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg",
                                    "width": 275
                                }
                            ],
                            "id": "toplists",
                            "name": "Top Lists"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/mood",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "mood",
                            "name": "Super Mood"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/party",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "party",
                            "name": "Party Time"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 3
                }
            }""";


        private static final String apiPlaylistsPartyResponse = """
            {
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen",
                            "id": "4k7EZPI3uKMz4aRRrLVfen",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e",
                                    "width": 300
                                }
                            ],
                            "name": "Noite Eletronica",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks",
                                "total": 100
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770",
                            "id": "4HZh0C9y80GzHDbHZyX770",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023",
                                    "width": 300
                                }
                            ],
                            "name": "Festa Indie",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks",
                                "total": 74
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final String testErrorMessage = "Test unpredictable error message";

        private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";

        private static final String apiNewReleasesResponse = """
            {
                "albums": {
                    "href": "https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20",
                    "items": [
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8",
                                    "id": "2RdwBSPQiwcmiDo9kixcl8",
                                    "name": "Pharrell Williams",
                                    "type": "artist",
                                    "uri": "spotify:artist:2RdwBSPQiwcmiDo9kixcl8"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                            },
                            "href": "https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71",
                            "id": "5ZX4m5aVSmWQ5iHAPQpT71",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930",
                                    "width": 64
                                }
                            ],
                            "name": "Runnin'",
                            "type": "album",
                            "uri": "spotify:album:5ZX4m5aVSmWQ5iHAPQpT71"
                        },
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                    "id": "3TVXtAsR1Inumwj472S9r4",
                                    "name": "Drake2",
                                    "type": "artist",
                                    "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                            },
                            "href": "https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd",
                            "id": "0geTzdk2InlqIoB16fW9Nd",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79",
                                    "width": 64
                                }
                            ],
                            "name": "Sneakin'",
                            "type": "album",
                            "uri": "spotify:album:0geTzdk2InlqIoB16fW9Nd"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiFeaturedPlaylistsResponse = """
            {
                "message": "Monday morning music, coming right up!",
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7",
                            "id": "6ftJBzU2LLQcaKefMi7ee7",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7",
                                    "width": 300
                                }
                            ],
                            "name": "Monday Morning Mood",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify",
                                "id": "spotify",
                                "type": "user",
                                "uri": "spotify:user:spotify"
                            },
                            "public": null,
                            "snapshot_id": "WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks",
                                "total": 245
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO",
                            "id": "4uOEx4OUrkoGNZoIlWMUbO",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8",
                                    "width": 300
                                }
                            ],
                            "name": "Upp och hoppa!",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify__sverige"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify__sverige",
                                "id": "spotify__sverige",
                                "type": "user",
                                "uri": "spotify:user:spotify__sverige"
                            },
                            "public": null,
                            "snapshot_id": "0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks",
                                "total": 38
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""";

        private static final TempWebServerMock resourceServerMock = new TempWebServerMock(resourceServerPort)
                .setPage("/v1/browse/categories", apiCategoriesResponse)
                .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                // unpredictable error on toplists request!!!
                .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
        private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);

        public static void auth(TestedProgram userProgram) {

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();

            synchronized (accessServer) {
                if (!accessServer.isStarted())
                    tokenServer.start();
            }

            synchronized (resourceServerMock) {
                if (!resourceServerMock.isStarted())
                    resourceServer.start();
            }

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                throw new WrongAnswer(Server.checkResult.getFeedback());
            }

            userProgram.stopBackground();
        }

        private void checkAlbum1(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 not appeared on \"new\" action");
            }
            if (reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 appeared on page 1 on \"new\" action");
            }
            if (!reply.contains("---PAGE 1 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
        }

        private void checkAlbum2(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 not appeared on \"new\" action");
            }
            if (reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 appeared on page 2 on \"new\" action");
            }

            if (!reply.contains("---PAGE 2 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
        }

        private int countAppearances(String str, String findStr) {
            int lastIndex = 0;
            int count = 0;

            while (lastIndex != -1) {
                lastIndex = str.indexOf(findStr, lastIndex);
                if (lastIndex != -1) {
                    count++;
                    lastIndex += findStr.length();
                }
            }
            return count;
        }

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();

        }

        void testNewAlbums(TestedProgram userProgram) {
            userProgram.execute("new");

            String output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` on -1 page.");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            checkAlbum2(output);

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` after the last page.");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("exit");
        }

        @DynamicTest
        CheckResult testNew() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            testNewAlbums(userProgram);
            testNewAlbums(userProgram);

            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testCategoriesNextPrev() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String category1 = "Top Lists";
            String category2 = "Super Mood";
            String category3 = "Party Time";



            userProgram.execute("categories");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("An error occurred while retrieving the category list:\n" +
                        "Access token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 3 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 3 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 1) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category3 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category2 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.stop();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeatured() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String featured1 =
                    "Monday Morning Mood\n" +
                    "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String featured2 =
                    "Upp och hoppa!\n" +
                    "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("featured");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, featured1) != 0
                    || countAppearances(output, featured2) != 1) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testPlayList() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String playlist1 =
                    "Noite Eletronica\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("playlists Party Time");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, playlist1) != 0
                    || countAppearances(output, playlist2) != 1) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
            resourceServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?error=access_denied"))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                    || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                        "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                    + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                    "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                checkResult = CheckResult.wrong("Something wrong with the server response.\n" +
                    "Make sure, that you get the right feedback in your browser.");
            }
        }
    }
  learner_created: false
- name: test/TempWebServerMock.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebPage;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.request.HttpRequestParser;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;

    public class TempWebServerMock extends WebServerMock {

        private static final String DELIM = "/";
        private static final String fictiveAccessToken = "456456";
        private static final String authorizationHeader = "Authorization";

    //    public static void main(String[] args) { // for testing
    //        org.hyperskill.hstest.mocks.web.WebServerMock ws = new org.hyperskill.hstest.mocks.web.WebServerMock(12345);
    //        ws.start();
    //        ws.run();
    //    }

        private ServerSocket serverSocket;
        private final Map<String, String> pages = new HashMap<>();
        private final int port;

        private boolean isStarted = false;
        private boolean isStopped = false;

        private String access_token = "";

        public TempWebServerMock(int port) {
            super(port);
            this.port = port;
        }

        public TempWebServerMock setPage(String url, String content) {
            return setPage(url, new WebPage().setContent(content));
        }

        public TempWebServerMock setPage(String url, WebPage page) {
            if (!url.startsWith(DELIM)) {
                url = DELIM + url;
            }
            pages.put(url, page.contentWithHeader());
            return this;
        }

        public String getAccess_token() {
            return access_token;
        }

        private void checkRequestHeaders(HttpRequest request) throws WrongAnswer {
            Map<String,String> requestHeaders = request.getHeaders();

            if(requestHeaders.containsKey(authorizationHeader)) {
                if(requestHeaders.get(authorizationHeader).contains(fictiveAccessToken)) {
                    access_token = requestHeaders.get(authorizationHeader);
                }
            }
        }

        private String resolveRequest(DataInputStream input) {
            HttpRequest request = HttpRequestParser.parse(input);
            checkRequestHeaders(request);
            return request != null ? request.getEndpoint() : null;
        }

        private void sendResponse(String path, DataOutputStream output) throws Exception {
            String response;
            if (path == null) {
                response = "Webpage not found!";
            } else {
                if (!path.startsWith(DELIM)) {
                    path = DELIM + path;
                }
                response = pages.getOrDefault(path, "Webpage not found!");
            }
            for (char c : response.toCharArray()) {
                output.write(c);
            }
        }

        private void handle(Socket socket) throws Exception {
            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            sendResponse(resolveRequest(input), output);
            input.close();
            output.close();
            socket.close();
        }

        public void start() {
            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException ignored) { }
        }

        public void run() {
            try {
                while (serverSocket != null && !serverSocket.isClosed()) {
                    isStarted = true;
                    isStopped = false;
                    handle(serverSocket.accept());
                }
            } catch (Exception ignored) { }
            isStarted = false;
            isStopped = true;
        }

        public void stop() {
            try {
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException ignored) { }
        }

        public boolean isStarted() {
            return isStarted;
        }

        public boolean isStopped() {
            return isStopped;
        }
    }
  learner_created: false
- name: src/responses/SpotifyCategoryResponse.java
  visible: true
  learner_created: true
- name: src/responses/SpotifyResponse.java
  visible: true
  learner_created: true
- name: src/responses/SpotifyFeaturedResponse.java
  visible: true
  learner_created: true
- name: src/responses/SpotifyNewReleasesReponse.java
  visible: true
  learner_created: true
- name: src/responses/SpotifyPlaylistResponse.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5481#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sun, 20 Aug 2023 08:07:16 UTC"
record: -1
