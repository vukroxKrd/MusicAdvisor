type: edu
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    import java.util.Scanner;

    import static advisor.InputSemaphore.continueReceivingInput;

    public class Main {
        static Scanner scanner = new Scanner(System.in);
        public final static String domainName = "https://accounts.spotify.com";
        public static String requestOperation() {
            return scanner.nextLine();
        }

        public static void main(String[] args) {

            String endpointUrl = "";
            if (args.length > 0 && args[0].equals("-access")) {
                endpointUrl = args[1];
            } else {
                endpointUrl = domainName;
            }
            SpotifyUser user = new SpotifyUser("616b49ea385644bbaa28ea3337e027c7", "784f6d729fb049eda00c01da538c6e3d", false);
            user.setEndpointUrl(endpointUrl);
            InputSemaphore semaphore = new InputSemaphore();

            do {
                semaphore.selectOperation(requestOperation(), user);
            } while (continueReceivingInput);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/InputSemaphore.java
  visible: true
  text: |
    package advisor;

    import server.HTTPServer;

    import java.awt.*;
    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;

    import static java.net.http.HttpRequest.newBuilder;

    public class InputSemaphore {
        public static final List<String> supportedOps = List.of("new", "featured", "categories", "playlists Mood", "auth", "exit");
        public static boolean continueReceivingInput = true;

        public void selectOperation(String input, SpotifyUser user) {

            String playlistCategory = "";
            if (input.contains("playlists")) {
                playlistCategory = input.replaceAll("playlists ", "");
                input = "playlists";
            }


            if (input.equals("exit")) {
                sayGoodBye();
            } else if (!user.isAuthenticated() && !input.equals("auth")) {
                promptUserToAuthenticate();
            } else {
                switch (input) {
                    case "new" -> newReleases();
                    case "featured" -> featured();
                    case "categories" -> categories();
                    case "playlists" -> playlists(playlistCategory);
                    case "auth" -> authenticate(user);
                    default -> returnSupportedOpList(supportedOps);
                }
            }
        }

        private void promptUserToAuthenticate() {
            System.out.println("Please, provide access for application.");
        }

        private void authenticate(SpotifyUser user) {

            try {
                HTTPServer.start();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            HTTPServer.listen(user);

            initialGetForCodeFromSpotify(user);

            System.out.println("code received");
            System.out.println("making http request for access_token...");
            SpotifyUser user1 = HTTPServer.reqeustTokensFromRemoteResource(user, HTTPServer.code);
            HTTPServer.stop(0);
        }

        private static void initialGetForCodeFromSpotify(SpotifyUser user) {
            String storedState = HTTPServer.generateRandomState(10);
            user.setStoredState(storedState);

            HttpClient client = HttpClient.newBuilder()
                    .build();

            String responseType = "code";
            String redirectUri = "http://localhost:8181";

            String url = String.format("%s/authorize?client_id=%s&response_type=%s&redirect_uri=%s&state=%s", Main.domainName, user.getClientId(), responseType, redirectUri, storedState);

            HttpRequest request = newBuilder()
                    .uri(URI.create(url))
                    .GET()
                    .build();

            try {
                client.send(request, HttpResponse.BodyHandlers.ofString());
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }

            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().browse(URI.create(url));
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }

        private void newReleases() {
            System.out.println("---NEW RELEASES---");
            Map<String, List<String>> releases = new LinkedHashMap<>();
            releases.put("Mountains", List.of("Sia", "Diplo", "Labrinth"));
            releases.put("Runaway", List.of("Lil Peep"));
            releases.put("The Greatest Show", List.of("Panic! At The Disco"));
            releases.put("All Out Life", List.of("Slipknot"));
            releases.forEach((release, group) -> System.out.println(release + " " + group));
        }

        private void featured() {
            System.out.println("---FEATURED---");
            List<String> featured = new ArrayList<>();
            featured.add("Mellow Morning");
            featured.add("Wake Up and Smell the Coffee");
            featured.add("Monday Motivation");
            featured.add("Songs to Sing in the Shower");
            featured.forEach(System.out::println);
        }

        private void categories() {
            System.out.println("---CATEGORIES---");
            List<String> categories = new ArrayList<>();
            categories.add("Top Lists");
            categories.add("Pop");
            categories.add("Mood");
            categories.add("Latin");
            categories.forEach(System.out::println);
        }

        private void playlists(String category) {
            System.out.println("---" + category.toUpperCase() + " PLAYLISTS---");
            List<String> moodPlaylists = new ArrayList<>();
            moodPlaylists.add("Walk Like A Badass");
            moodPlaylists.add("Rage Beats");
            moodPlaylists.add("Arab Mood Booster");
            moodPlaylists.add("Sunday Stroll");
            moodPlaylists.forEach(System.out::println);
        }

        private void sayGoodBye() {
            System.out.println("---GOODBYE!---");
            continueReceivingInput = false;
        }

        private void returnSupportedOpList(List<String> operations) {
            continueReceivingInput = false;
            System.out.println("The list of supported operations: ");
            operations.forEach(System.out::println);
        }
    }
  learner_created: false
- name: src/advisor/SpotifyUser.java
  visible: true
  text: |
    package advisor;

    public class SpotifyUser {

        private String clientId;
        private String clientSecret;
        private boolean isAuthenticated = false;
        private String code;
        private String storedState;
        private String access_token;
        private String refresh_token;

        private String endpointUrl;
        public SpotifyUser() {
        }

        public SpotifyUser(String clientId, String clientSecret, boolean isAuthenticated) {
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.isAuthenticated = false;
        }

        public boolean isAuthenticated() {
            return isAuthenticated;
        }
        public void setAuthenticated(boolean authenticated) {
            isAuthenticated = authenticated;
        }

        public String getClientId() {
            return clientId;
        }
        public void setClientId(String clientId) {
            this.clientId = clientId;
        }

        public String getClientSecret() {
            return clientSecret;
        }
        public void setClientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
        }

        public String getCode() {
            return code;
        }
        public void setCode(String code) {
            this.code = code;
        }

        public String getStoredState() {
            return storedState;
        }
        public void setStoredState(String storedState) {
            this.storedState = storedState;
        }

        public String getAccess_token() {
            return access_token;
        }
        public void setAccess_token(String access_token) {
            this.access_token = access_token;
        }

        public String getRefresh_token() {
            return refresh_token;
        }
        public void setRefresh_token(String refresh_token) {
            this.refresh_token = refresh_token;
        }

        public String getEndpointUrl() {
            return endpointUrl;
        }
        public void setEndpointUrl(String endpointUrl) {
            this.endpointUrl = endpointUrl;
        }
    }
  learner_created: false
- name: src/resources/spotify.properties
  visible: true
  text: |-
    client_id=616b49ea385644bbaa28ea3337e027c7
    client_secret=784f6d729fb049eda00c01da538c6e3d
  learner_created: false
- name: src/server/HTTPServer.java
  visible: true
  text: |-
    package server;

    import advisor.Main;
    import advisor.SpotifyUser;
    import com.google.gson.Gson;
    import com.sun.net.httpserver.HttpExchange;
    import com.sun.net.httpserver.HttpHandler;
    import com.sun.net.httpserver.HttpServer;

    import java.awt.*;
    import java.io.IOException;
    import java.io.UnsupportedEncodingException;
    import java.net.*;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.nio.charset.StandardCharsets;
    import java.util.Base64;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;

    import static advisor.Main.domainName;
    import static com.sun.net.httpserver.HttpServer.create;
    import static java.net.http.HttpRequest.newBuilder;

    public class HTTPServer {
        private static HttpServer server;
        public static String code;

        public static void listen(SpotifyUser user) {

            server.createContext("/",
                    new HttpHandler() {
                        public void handle(HttpExchange exchange) throws IOException {
                            String query = exchange.getRequestURI().getQuery();
                            String msg;

                            if (query != null && query.contains("code")) {
                                Map<String, String> qParams = parseQueryToParams(query);
                                code = qParams.get("code");
                                msg = "Got the code. Return back to your program.";
                                user.setCode(code);
                                exchange.sendResponseHeaders(200, msg.length());
                                exchange.getResponseBody().write(msg.getBytes());
                                exchange.getResponseBody().close();
                            } else {
                                msg = "Authorization code not found. Try again.";
                                exchange.sendResponseHeaders(404, msg.length());
                                exchange.getResponseBody().write(msg.getBytes());
                                exchange.getResponseBody().close();
                            }
                        }
                    }
            );
        }

        public static SpotifyUser reqeustTokensFromRemoteResource(SpotifyUser user, String code) {

            HttpClient client = HttpClient.newBuilder().build();

            String idAndSecretToEncode = user.getClientId() + ":" + user.getClientSecret();

            String encodedCreds = Base64.getEncoder().encodeToString(idAndSecretToEncode.getBytes());
            encodedCreds = "Basic " + encodedCreds;

            Map<String, String> formData = new HashMap<>();
            formData.put("code", code);
            formData.put("redirect_uri", "http://localhost:8181/");
            formData.put("grant_type", "authorization_code");

            HttpRequest postRequest = HttpRequest.newBuilder()
                    .header("Authorization", encodedCreds)
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .uri(URI.create(user.getEndpointUrl() + "/api/token"))
                    .POST(HttpRequest.BodyPublishers.ofString(getFormDataAsString(formData)))
                    .build();

            HttpResponse<String> postResponse = null;
            String postBody = null;
            try {
                postResponse = client.send(postRequest, HttpResponse.BodyHandlers.ofString());
                postBody = postResponse.body();
                System.out.println("response:");
                System.out.println(postBody);
                user.setAuthenticated(true);
                System.out.println("---SUCCESS---");
            } catch (InterruptedException | IOException e) {
                throw new RuntimeException(e);
            }

            Gson gson = new Gson();
            SpotifyAuthResponse spotifyAuthResponse = gson.fromJson(postBody, SpotifyAuthResponse.class);

            if (spotifyAuthResponse.getAccess_token() != null) {
                user.setAccess_token(spotifyAuthResponse.getAccess_token());
                user.setRefresh_token(spotifyAuthResponse.getRefresh_token());
            }
            return user;
        }

        private static String getFormDataAsString(Map<String, String> formData) {
            StringBuilder formBodyBuilder = new StringBuilder();
            for (Map.Entry<String, String> singleEntry : formData.entrySet()) {
                if (formBodyBuilder.length() > 0) {
                    formBodyBuilder.append("&");
                }
                formBodyBuilder.append(URLEncoder.encode(singleEntry.getKey(), StandardCharsets.UTF_8));
                formBodyBuilder.append("=");
                formBodyBuilder.append(URLEncoder.encode(singleEntry.getValue(), StandardCharsets.UTF_8));
            }
            return formBodyBuilder.toString();
        }

        private static Map<String, String> parseQueryToParams(String query) {
            /* Взято с https://stackoverflow.com/questions/11640025/how-to-obtain-the-query-string-in-a-get-with-java-httpserver-httpexchange
             * С небольшими изменениями
             */
            Map<String, String> result = new HashMap<>();
            if (query == null) {
                return result;
            }

            int last = 0;
            int next;
            int length = query.length();

            while (last < length) {
                next = query.indexOf('&', last);
                if (next == -1) {
                    next = length;
                }

                if (next > last) {
                    int eqPos = query.indexOf('=', last);
                    try {
                        if (eqPos < 0 || eqPos > next) {
                            result.put(URLDecoder.decode(query.substring(last, next), "utf-8"), "");
                        } else {
                            result.put(URLDecoder.decode(query.substring(last, eqPos), "utf-8"), URLDecoder.decode(query.substring(eqPos + 1, next), "utf-8"));
                        }
                    } catch (UnsupportedEncodingException e) {
                        assert false : "UTF-8 поддерживается Java 'Из коробки' - исключения быть не должно";
                    }
                }
                last = next + 1;
            }
            return result;
        }

        public static void start() throws IOException {
            server = create();
            server.bind(new InetSocketAddress(8181), 0);
            server.setExecutor(null);
            server.start();
            System.out.println("use this link to request the access code: ");
            System.out.println(domainName + "/authorize?client_id=0db1be20b0494973a17516bae8af091d&redirect_uri=http://localhost:8181&response_type=code");
            System.out.println("waiting for code...");
        }

        public static void stop(int delay) {
            server.stop(delay);
        }
        public static String generateRandomState(int length) {
            char[] text = new char[length];
            String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            Random random = new Random();
            for (var i = 0; i < length; i++) {
                text[i] = characters.charAt(random.nextInt(characters.length()));
            }
            return new String(text);
        }
    }
  learner_created: false
- name: src/server/SpotifyAuthResponse.java
  visible: true
  text: |
    package server;

    public class SpotifyAuthResponse {
         private String access_token;
         private String token_type;
         private String expires_in;
         private String refresh_token;
         private String scope;

        public String getAccess_token() {
            return access_token;
        }
        public void setAccess_token(String access_token) {
            this.access_token = access_token;
        }

        public String getToken_type() {
            return token_type;
        }
        public void setToken_type(String token_type) {
            this.token_type = token_type;
        }

        public String getExpires_in() {
            return expires_in;
        }
        public void setExpires_in(String expires_in) {
            this.expires_in = expires_in;
        }

        public String getRefresh_token() {
            return refresh_token;
        }
        public void setRefresh_token(String refresh_token) {
            this.refresh_token = refresh_token;
        }

        public String getScope() {
            return scope;
        }
        public void setScope(String scope) {
            this.scope = scope;
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";


        private static final int accessServerPort = 45678;
        private static final int resourceServerPort = 56789;

        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
        private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl,
                "-resource",
                resourceServerUrl
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        // TODO handle auth code argument to get the token.
        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);


        private static final String spotifyServerUrl = "https://api\\.spotify\\.com";

        private static final String apiCategoriesResponse = """
            {
                "categories": {
                    "href": "https://api.spotify.com/v1/browse/categories?offset=0&limit=20",
                    "items": [
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/toplists",
                            "icons": [
                                {
                                    "height": 275,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg",
                                    "width": 275
                                }
                            ],
                            "id": "toplists",
                            "name": "Top Lists"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/mood",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "mood",
                            "name": "Super Mood"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/party",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "party",
                            "name": "Party Time"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 3
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiPlaylistsPartyResponse = """
            {
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen",
                            "id": "4k7EZPI3uKMz4aRRrLVfen",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e",
                                    "width": 300
                                }
                            ],
                            "name": "Noite Eletronica",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks",
                                "total": 100
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770",
                            "id": "4HZh0C9y80GzHDbHZyX770",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023",
                                    "width": 300
                                }
                            ],
                            "name": "Festa Indie",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks",
                                "total": 74
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final String testErrorMessage = "Test unpredictable error message";

        private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";

        private static final String apiNewReleasesResponse = """
            {
                "albums": {
                    "href": "https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20",
                    "items": [
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8",
                                    "id": "2RdwBSPQiwcmiDo9kixcl8",
                                    "name": "Pharrell Williams",
                                    "type": "artist",
                                    "uri": "spotify:artist:2RdwBSPQiwcmiDo9kixcl8"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                            },
                            "href": "https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71",
                            "id": "5ZX4m5aVSmWQ5iHAPQpT71",
                            "name": "Runnin'",
                            "type": "album",
                            "uri": "spotify:album:5ZX4m5aVSmWQ5iHAPQpT71"
                        },
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                    "id": "3TVXtAsR1Inumwj472S9r4",
                                    "name": "Drake2",
                                    "type": "artist",
                                    "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                },
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                    "id": "3TVXtAsR1Inumwj472S9r4",
                                    "name": "Drake3",
                                    "type": "artist",
                                    "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                            },
                            "href": "https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd",
                            "id": "0geTzdk2InlqIoB16fW9Nd",
                            "name": "Sneakin'",
                            "type": "album",
                            "uri": "spotify:album:0geTzdk2InlqIoB16fW9Nd"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiFeaturedPlaylistsResponse = """
            {
                "message": "Monday morning music, coming right up!",
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7",
                            "id": "6ftJBzU2LLQcaKefMi7ee7",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7",
                                    "width": 300
                                }
                            ],
                            "name": "Monday Morning Mood",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify",
                                "id": "spotify",
                                "type": "user",
                                "uri": "spotify:user:spotify"
                            },
                            "public": null,
                            "snapshot_id": "WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks",
                                "total": 245
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO",
                            "id": "4uOEx4OUrkoGNZoIlWMUbO",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8",
                                    "width": 300
                                }
                            ],
                            "name": "Upp och hoppa!",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify__sverige"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify__sverige",
                                "id": "spotify__sverige",
                                "type": "user",
                                "uri": "spotify:user:spotify__sverige"
                            },
                            "public": null,
                            "snapshot_id": "0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks",
                                "total": 38
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final TempWebServerMock resourceServerMock = new TempWebServerMock(resourceServerPort)
                .setPage("/v1/browse/categories", apiCategoriesResponse)
                .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                // unpredictable error on toplists request!!!
                .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
        private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);

        public static void auth(TestedProgram userProgram) {

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();

            synchronized (accessServer) {
                if (!accessServer.isStarted())
                    tokenServer.start();
            }

            synchronized (resourceServerMock) {
                if (!resourceServerMock.isStarted())
                    resourceServer.start();
            }

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                throw new WrongAnswer(Server.checkResult.getFeedback());
            }

            userProgram.stopBackground();
        }

        @DynamicTest
        CheckResult testNewWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("new");

            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeaturedWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("featured");

            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testCategoriesWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("categories");

            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testPlaylistWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("playlists Party Time");

            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();

        }

        @DynamicTest
        CheckResult testNew() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("new");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access token is incorrect!");
            }

            String outputAfterNew = userProgram.getOutput();

            String album1 =
                    "Runnin'\n" +
                            "[Pharrell Williams]\n" +
                            "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 =
                    "Sneakin'\n" +
                            "[Drake2, Drake3]\n" +
                            "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (outputAfterNew.contains("Invalid access token")) {
                return CheckResult.wrong("Your answer was `Invalid access token` on `new` action. " +
                        "Make sure you use the server from -resource command line argument.");
            }

            if (!outputAfterNew.contains(album1) || !outputAfterNew.contains(album2)) {
                return CheckResult.wrong(
                        "There are no albums in correct format on \"new\" action. " +
                                "Make sure you use the server from -resource command line argument.");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testCategories() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("categories");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("An error occurred while retrieving the category list:\n" +
                        "Access token is incorrect!");
            }

            String outputAfterCategories = userProgram.getOutput();

            String category1 = "Top Lists";
            String category2 = "Super Mood";
            String category3 = "Party Time";

            if (!outputAfterCategories.contains(category1)
                    || !outputAfterCategories.contains(category2)
                    || !outputAfterCategories.contains(category3)) {

                return CheckResult.wrong("There are no categories in correct format on \"category\" action");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeatured() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("featured");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access token is incorrect!");
            }

            String outputAfterFeatured = userProgram.getOutput();

            String featured1 =
                    "Monday Morning Mood\n" +
                            "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String featured2 =
                    "Upp och hoppa!\n" +
                            "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!outputAfterFeatured.contains(featured1)
                    || !outputAfterFeatured.contains(featured2)) {

                return CheckResult.wrong("There are no featured playlists in correct format on \"featured\" action");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testPartyPlayList() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("playlists Party Time");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access token is incorrect!");
            }

            String outputAfterPartyPlaylist = userProgram.getOutput();

            String playlist1 =
                    "Noite Eletronica\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!outputAfterPartyPlaylist.contains(playlist1)
                    || !outputAfterPartyPlaylist.contains(playlist2)) {
                return CheckResult.wrong("There are no playlists in correct format on \"playlists {name}\" action. " +
                        "Make sure you correctly parsed the category name.");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testUnknownPlayList() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("playlists Party Time");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access token is incorrect!");
            }

            String outputAfterUnknownPlaylist = userProgram.getOutput();

            String playlist1 =
                    "Noite Eletronica\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!outputAfterUnknownPlaylist.contains(playlist1)
                    || !outputAfterUnknownPlaylist.contains(playlist2)) {

                return CheckResult.wrong("There are no playlists in correct format on \"playlists {name}\" action. " +
                        "Make sure you correctly parsed the category name.");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testTopPlayList() {

            TestedProgram userProgram = new TestedProgram();

            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("playlists Top Lists");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access token is incorrect!");
            }

            String outputAfterUnknownPlaylist = userProgram.getOutput();

            if (!outputAfterUnknownPlaylist.contains(testErrorMessage)) {
                return new CheckResult(false,
                        "You got a json with unpredictable error from the api. " +
                                "Error message should be parsed from the api response and printed.");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
            resourceServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?error=access_denied"))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                        || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                            "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                        + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                        "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: test/TempWebServerMock.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebPage;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.request.HttpRequestParser;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;

    public class TempWebServerMock extends WebServerMock {

        private static final String DELIM = "/";
        private static final String fictiveAccessToken = "456456";
        private static final String authorizationHeader = "Authorization";

    //    public static void main(String[] args) { // for testing
    //        org.hyperskill.hstest.mocks.web.WebServerMock ws = new org.hyperskill.hstest.mocks.web.WebServerMock(12345);
    //        ws.start();
    //        ws.run();
    //    }

        private ServerSocket serverSocket;
        private final Map<String, String> pages = new HashMap<>();
        private final int port;

        private boolean isStarted = false;
        private boolean isStopped = false;

        private String access_token = "";

        public TempWebServerMock(int port) {
            super(port);
            this.port = port;
        }

        public TempWebServerMock setPage(String url, String content) {
            return setPage(url, new WebPage().setContent(content));
        }

        public TempWebServerMock setPage(String url, WebPage page) {
            if (!url.startsWith(DELIM)) {
                url = DELIM + url;
            }
            pages.put(url, page.contentWithHeader());
            return this;
        }

        public String getAccess_token() {
            return access_token;
        }

        private void checkRequestHeaders(HttpRequest request) throws WrongAnswer {
            Map<String,String> requestHeaders = request.getHeaders();

            if(requestHeaders.containsKey(authorizationHeader)) {
                if(requestHeaders.get(authorizationHeader).contains(fictiveAccessToken)) {
                    access_token = requestHeaders.get(authorizationHeader);
                }
            }
        }

        private String resolveRequest(DataInputStream input) {
            HttpRequest request = HttpRequestParser.parse(input);
            checkRequestHeaders(request);
            return request != null ? request.getEndpoint() : null;
        }

        private void sendResponse(String path, DataOutputStream output) throws Exception {
            String response;
            if (path == null) {
                response = "Webpage not found!";
            } else {
                if (!path.startsWith(DELIM)) {
                    path = DELIM + path;
                }
                response = pages.getOrDefault(path, "Webpage not found!");
            }
            for (char c : response.toCharArray()) {
                output.write(c);
            }
        }

        private void handle(Socket socket) throws Exception {
            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            sendResponse(resolveRequest(input), output);
            input.close();
            output.close();
            socket.close();
        }

        public void start() {
            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException ignored) { }
        }

        public void run() {
            try {
                while (serverSocket != null && !serverSocket.isClosed()) {
                    isStarted = true;
                    isStopped = false;
                    handle(serverSocket.accept());
                }
            } catch (Exception ignored) { }
            isStarted = false;
            isStopped = true;
        }

        public void stop() {
            try {
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException ignored) { }
        }

        public boolean isStarted() {
            return isStarted;
        }

        public boolean isStopped() {
            return isStopped;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5480#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 12 Aug 2023 08:17:16 UTC"
record: 3
