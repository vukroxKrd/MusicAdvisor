type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/InputSemaphore.java
  visible: true
  text: |
    package advisor;

    import java.util.*;

    public class InputSemaphore {
        static List<String> supportedOps = List.of("new", "featured", "categories", "playlists Mood", "exit");
        static boolean continueReceivingInput = true;

        static Scanner scanner = new Scanner(System.in);

        public static String requestOperation() {
            return scanner.nextLine();
        }

        public void selectOperation(String input) {
            String playlistCategory = "";
            if (input.contains("playlists")) {
                playlistCategory = input.replaceAll("playlists ", "");
                input = "playlists";
            }
            switch (input) {
                case "new" -> newReleases();
                case "featured" -> featured();
                case "categories" -> categories();
                case "playlists" -> playlists(playlistCategory);
                case "exit" -> sayGoodBye();
                default -> returnSupportedOpList(supportedOps);
            }
        }

        private void newReleases() {
            System.out.println("---NEW RELEASES---");
            Map<String, List<String>> releases = new LinkedHashMap<>();
            releases.put("Mountains", List.of("Sia", "Diplo", "Labrinth"));
            releases.put("Runaway", List.of("Lil Peep"));
            releases.put("The Greatest Show", List.of("Panic! At The Disco"));
            releases.put("All Out Life", List.of("Slipknot"));
            releases.forEach((release, group) -> System.out.println(release + " " + group));
        }

        private void featured() {
            System.out.println("---FEATURED---");
            List<String> featured = new ArrayList<>();
            featured.add("Mellow Morning");
            featured.add("Wake Up and Smell the Coffee");
            featured.add("Monday Motivation");
            featured.add("Songs to Sing in the Shower");
            featured.forEach(System.out::println);
        }

        private void categories() {
            System.out.println("---CATEGORIES---");
            List<String> categories = new ArrayList<>();
            categories.add("Top Lists");
            categories.add("Pop");
            categories.add("Mood");
            categories.add("Latin");
            categories.forEach(System.out::println);
        }

        private void playlists(String category) {
            System.out.println("---" + category.toUpperCase() + " PLAYLISTS---");
            List<String> moodPlaylists = new ArrayList<>();
            moodPlaylists.add("Walk Like A Badass");
            moodPlaylists.add("Rage Beats");
            moodPlaylists.add("Arab Mood Booster");
            moodPlaylists.add("Sunday Stroll");
            moodPlaylists.forEach(System.out::println);
        }

        private void sayGoodBye() {
            System.out.println("---GOODBYE!---");
        }

        private void returnSupportedOpList(List<String> operations) {
            continueReceivingInput = false;
    //        System.out.println("The list of supported operations: ");
    //        operations.forEach(System.out::println);
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
    //                    if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
    //                        return new CheckResult(false,
    //                                "You shouldn't use the client_id from the example!! " +
    //                                        "You should create your own id on the spotify site.");
    //                    }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  learner_created: true
- name: src/advisor/SpotifyUser.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5478#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 30 Jun 2023 18:14:53 UTC"
record: 2
